# -*- coding: utf-8 -*-
"""fibonacci.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1klRmNL65j4UDnhjIiidrGERilO3RCgJF
"""

# Fibonacci calculation using iteration
# returns the n'th number in the Fibonacci sequence
def iter_fib(n):
  prev, cur = (0, 1)
  for i in range(2, n+1):
    prev, cur = (cur, prev + cur)
  return cur

# Fibonacci calculation using recursion
# returns the n'th number in the Fibonacci sequence
def recur_fib(n):
  if n < 2:
    return n
  else:
    return recur_fib(n-1) + recur_fib(n-2)

# Fibonacci calculation using a Matrix
# returns the n'th number in the Fibonacci sequence
def matrix_fib(n):
  F1 = [1, 1, 1, 0]
  return matrix_power(F1, n)[1]

#unrefined matrix multiplication... #TODO!
def matrix_multiply(A, B):
  a, b, c, d = A
  x, y, z, w = B
    
  return (
      a*x + b*z,
      a*y + b*w,
      c*x + d*z,
      c*y + d*w,
      )

def matrix_power(A, m):
  if m == 0:
    return [1, 0, 0, 1]
  B = A
  for _ in range(m-1):
    B = matrix_multiply(B, A)
  return B

def main():
  n = 23
  print(iter_fib(n))
  print(recur_fib(n))
  print(matrix_fib(n))

main()